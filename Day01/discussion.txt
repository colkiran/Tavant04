Python
------
why python?

perl 	- 2010		-	Web Application (perl and CGI)		-  special variables
python 	- 2011		-											-  ready made functions
ruby	- 2012		-	ruby on Rails	-	MVC 

TCL / TK - 			- 	UI for desktop application
Lua 	- 

Grovvy	-	Java based	-	

-------------------------------------------------------------------------------------------

Open Source 	-	source code freely available

Python
------
1. language features		-	C (variables, loops, if conditions, functions)
2. OOPS						-	C++, Java, dotnet


desktop 			-	python and TK
web application	-	RESTful Service, JSON, MVC, Microservices	->	Django, Flask, Pyramid
Mobile App			-	kivy
Automation Tools	-	Testing		-	Selenium
						pytest		-	performance testing
						Networking -	paramiko
ETL					-	PETL (Extraction Transformation and Loading)
Data Science		-
						Data analysis / Analytics
						ML	(Machine Learning)
						Deep Learning	(Neural Networks)
						AI	(Artificial Intelligence)

python 
------
we get 3 flavours of it

1. Cpython		-	currently using
2. Jython		-	python converting to java code
3. Iron Python	-	Python talking dotnet libraries


versions
--------
2.x and 3.x

latest version
---------------
3.11.x			-	www.python.org

				-	www.activestate.com

Editors
-------
Notepad
Notepad++
Pycharm		-	CE (community edition)

VS Code

SublimeText

Jupyter note

spyder

google colabs

python 3.x
----------
1. Python (console)

2. python Shell

3. IDLE			- Integrated development Environment



Overloaded Operators
--------------------
1. +		=> addition and Concatenation

2. *		=> multiplication and print a string n number of times



reload function -> form imp module

from imp import reload



Coding Rules
-------------

#!	=	Shebang		-> mention your python executable file path

#	- 	comments in python (single line comment)

Indentation -> for braching your code

we rely on {parnathesis}

for ()
{
	print("hello")
	
	if ()
	{
	
	}
	else	
	{

	}

}

In python everything relies on indentation

def fun():
	for i in range(1, 10):
		if i % 2 == 0:
			print(x)
			print(x)
			print(x)
		
		print(for for loop)

	print(function code)


print("hello World")

Strings
-------
"single line string"

'single line string'

"""
multiple
	line
		string
"""

'''
multiple
	line
		string
'''	

python uses doc strings - used to describe the use of a function or a class

Data Types
----------
Numbers
	Integers
	Float
	Complex Numbers

Operators
---------

binary values

0101
0011
0111 - 7


Loops
-----
1. for loop			-	 same as foreach loop in other tech

2. while
	
a. continue
b. break
c. else


control structures
------------------


print
-----
print(data, sep=, end="\n")

print(data, end="")


Problem
-------
a. print the following pattern

1
23
456
78910

b. print the prime numbers between 150 and 50 and also print the count of it



Problems
--------

1. print the pattern

1
22
333
4444
55555

    1
   1 2
  1 2 3
 1 2 3 4
1 2 3 4 5
 1 2 3 4 
  1 2 3
   1 2
    1


1 2 3 4 5
 1 2 3 4
  1 2 3
   1 2
    1
   2 1 
  3 2 1
 4 3 2 1
5 4 3 2 1

2. find the magic number

1! = 1
2! = 2
145 = 1! + 4! + 5!
	  1  + 24 + 120
	= 145
what is the next number that satisfies this condition?


3. write a code to build pascals triangle

				1
              1 1
             1 2 1
            1 3 3 1
           1 4 6 5 1
		

  








